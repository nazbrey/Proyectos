// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Presentation/Protos/role.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace RolePermissionService.Protos {
  /// <summary>
  /// con esta linea indicamos que el servicio es RoleService
  /// </summary>
  public static partial class RoleService
  {
    static readonly string __ServiceName = "RolePermissionService.Protos.RoleService";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::RolePermissionService.Protos.CreateRoleRequest> __Marshaller_RolePermissionService_Protos_CreateRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.CreateRoleRequest.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.CreateRoleResponse> __Marshaller_RolePermissionService_Protos_CreateRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.CreateRoleResponse.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.GetRoleRequest> __Marshaller_RolePermissionService_Protos_GetRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.GetRoleRequest.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.GetRoleResponse> __Marshaller_RolePermissionService_Protos_GetRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.GetRoleResponse.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.UpdateRoleRequest> __Marshaller_RolePermissionService_Protos_UpdateRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.UpdateRoleRequest.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.UpdateRoleResponse> __Marshaller_RolePermissionService_Protos_UpdateRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.UpdateRoleResponse.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.DeleteRoleRequest> __Marshaller_RolePermissionService_Protos_DeleteRoleRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.DeleteRoleRequest.Parser));
    static readonly grpc::Marshaller<global::RolePermissionService.Protos.DeleteRoleResponse> __Marshaller_RolePermissionService_Protos_DeleteRoleResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::RolePermissionService.Protos.DeleteRoleResponse.Parser));

    static readonly grpc::Method<global::RolePermissionService.Protos.CreateRoleRequest, global::RolePermissionService.Protos.CreateRoleResponse> __Method_CreateRole = new grpc::Method<global::RolePermissionService.Protos.CreateRoleRequest, global::RolePermissionService.Protos.CreateRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateRole",
        __Marshaller_RolePermissionService_Protos_CreateRoleRequest,
        __Marshaller_RolePermissionService_Protos_CreateRoleResponse);

    static readonly grpc::Method<global::RolePermissionService.Protos.GetRoleRequest, global::RolePermissionService.Protos.GetRoleResponse> __Method_GetRole = new grpc::Method<global::RolePermissionService.Protos.GetRoleRequest, global::RolePermissionService.Protos.GetRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetRole",
        __Marshaller_RolePermissionService_Protos_GetRoleRequest,
        __Marshaller_RolePermissionService_Protos_GetRoleResponse);

    static readonly grpc::Method<global::RolePermissionService.Protos.UpdateRoleRequest, global::RolePermissionService.Protos.UpdateRoleResponse> __Method_UpdateRole = new grpc::Method<global::RolePermissionService.Protos.UpdateRoleRequest, global::RolePermissionService.Protos.UpdateRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateRole",
        __Marshaller_RolePermissionService_Protos_UpdateRoleRequest,
        __Marshaller_RolePermissionService_Protos_UpdateRoleResponse);

    static readonly grpc::Method<global::RolePermissionService.Protos.DeleteRoleRequest, global::RolePermissionService.Protos.DeleteRoleResponse> __Method_DeleteRole = new grpc::Method<global::RolePermissionService.Protos.DeleteRoleRequest, global::RolePermissionService.Protos.DeleteRoleResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteRole",
        __Marshaller_RolePermissionService_Protos_DeleteRoleRequest,
        __Marshaller_RolePermissionService_Protos_DeleteRoleResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::RolePermissionService.Protos.RoleReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of RoleService</summary>
    [grpc::BindServiceMethod(typeof(RoleService), "BindService")]
    public abstract partial class RoleServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::RolePermissionService.Protos.CreateRoleResponse> CreateRole(global::RolePermissionService.Protos.CreateRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RolePermissionService.Protos.GetRoleResponse> GetRole(global::RolePermissionService.Protos.GetRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RolePermissionService.Protos.UpdateRoleResponse> UpdateRole(global::RolePermissionService.Protos.UpdateRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::RolePermissionService.Protos.DeleteRoleResponse> DeleteRole(global::RolePermissionService.Protos.DeleteRoleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for RoleService</summary>
    public partial class RoleServiceClient : grpc::ClientBase<RoleServiceClient>
    {
      /// <summary>Creates a new client for RoleService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public RoleServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for RoleService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public RoleServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected RoleServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected RoleServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::RolePermissionService.Protos.CreateRoleResponse CreateRole(global::RolePermissionService.Protos.CreateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RolePermissionService.Protos.CreateRoleResponse CreateRole(global::RolePermissionService.Protos.CreateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.CreateRoleResponse> CreateRoleAsync(global::RolePermissionService.Protos.CreateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.CreateRoleResponse> CreateRoleAsync(global::RolePermissionService.Protos.CreateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateRole, null, options, request);
      }
      public virtual global::RolePermissionService.Protos.GetRoleResponse GetRole(global::RolePermissionService.Protos.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RolePermissionService.Protos.GetRoleResponse GetRole(global::RolePermissionService.Protos.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.GetRoleResponse> GetRoleAsync(global::RolePermissionService.Protos.GetRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.GetRoleResponse> GetRoleAsync(global::RolePermissionService.Protos.GetRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetRole, null, options, request);
      }
      public virtual global::RolePermissionService.Protos.UpdateRoleResponse UpdateRole(global::RolePermissionService.Protos.UpdateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RolePermissionService.Protos.UpdateRoleResponse UpdateRole(global::RolePermissionService.Protos.UpdateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.UpdateRoleResponse> UpdateRoleAsync(global::RolePermissionService.Protos.UpdateRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.UpdateRoleResponse> UpdateRoleAsync(global::RolePermissionService.Protos.UpdateRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateRole, null, options, request);
      }
      public virtual global::RolePermissionService.Protos.DeleteRoleResponse DeleteRole(global::RolePermissionService.Protos.DeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRole(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::RolePermissionService.Protos.DeleteRoleResponse DeleteRole(global::RolePermissionService.Protos.DeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteRole, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.DeleteRoleResponse> DeleteRoleAsync(global::RolePermissionService.Protos.DeleteRoleRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteRoleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::RolePermissionService.Protos.DeleteRoleResponse> DeleteRoleAsync(global::RolePermissionService.Protos.DeleteRoleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteRole, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override RoleServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new RoleServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(RoleServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateRole, serviceImpl.CreateRole)
          .AddMethod(__Method_GetRole, serviceImpl.GetRole)
          .AddMethod(__Method_UpdateRole, serviceImpl.UpdateRole)
          .AddMethod(__Method_DeleteRole, serviceImpl.DeleteRole).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, RoleServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RolePermissionService.Protos.CreateRoleRequest, global::RolePermissionService.Protos.CreateRoleResponse>(serviceImpl.CreateRole));
      serviceBinder.AddMethod(__Method_GetRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RolePermissionService.Protos.GetRoleRequest, global::RolePermissionService.Protos.GetRoleResponse>(serviceImpl.GetRole));
      serviceBinder.AddMethod(__Method_UpdateRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RolePermissionService.Protos.UpdateRoleRequest, global::RolePermissionService.Protos.UpdateRoleResponse>(serviceImpl.UpdateRole));
      serviceBinder.AddMethod(__Method_DeleteRole, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::RolePermissionService.Protos.DeleteRoleRequest, global::RolePermissionService.Protos.DeleteRoleResponse>(serviceImpl.DeleteRole));
    }

  }
}
#endregion
